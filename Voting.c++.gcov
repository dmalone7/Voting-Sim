        -:    0:Source:Voting.c++
        -:    0:Graph:Voting.gcno
        -:    0:Data:Voting.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <iostream> // endl, istream, ostream
        -:    2:#include <sstream>  // istringstream
        -:    3:#include <string>   // getline, string
        -:    4:#include <vector>   // vector
        -:    5:#include "Voting.h"
        -:    6:
        -:    7:using namespace std;
        -:    8:
        -:    9:/* given all test cases as a string, read and return the winners as a string */
function _Z11voting_readRKSs called 0 returned 0% blocks executed 0%
    #####:   10:string voting_read(const string &s) {
    #####:   11:  return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   12:}
        -:   13:
        -:   14:/* calls voting_read given reading and writing streams and prints the winners */
function _Z12voting_solveRSiRSo called 1 returned 100% blocks executed 52%
        1:   15:void voting_solve(istream &r, ostream &w) {
        1:   16:  vector<string> candidates;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   17:  int num_cases, num_candidates, loop_candidates, current_ballot;
        -:   18:  int ballots[MAX_BALLOTS][MAX_CANDIDATES];
        2:   19:  string s, end;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        -:   20:
        1:   21:  num_cases = -1;
        1:   22:  num_candidates = -1;
        1:   23:  loop_candidates = -1;
        1:   24:  current_ballot = 0;
        1:   25:  end = "";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   26:
        1:   27:  getline(r, s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   28:  num_cases = stoi(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   29:  w << num_cases << endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:   30:
        1:   31:  getline(r, s); // consume new line character
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   32:
        -:   33:  // if num_cases == 1, look for EOF instead of '\n'
        3:   34:  while(num_cases > 0) {
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:   35:    getline(r, s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   36:    num_candidates = stoi(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   37:    w << num_candidates << endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:   38:
        1:   39:    if(num_cases == 1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   40:      end = string(1, EOF);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        -:   41:    }
        -:   42:
        1:   43:    if(num_candidates == 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   44:      w << "no candidates" << endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:   45:    }
        -:   46:
        -:   47:    else {
    #####:   48:      loop_candidates = num_candidates;
        -:   49:      // Look for candidate names
    #####:   50:      int j = 0;
    #####:   51:      while(loop_candidates > 0) {
branch  0 never executed
branch  1 never executed
    #####:   52:        getline(r, s);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   53:        candidates.push_back(s);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   54:        w << candidates[j++] << endl;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:   55:        --loop_candidates;
        -:   56:      }
        -:   57:    }
        -:   58:
        -:   59:    // strange case where num_candidates == 0 and num_cases == 1 
        -:   60:    // still works; s != end immediately terminates while
        -:   61:
        -:   62:    // while still lines in the test case
        2:   63:    while(getline(r, s) && s.compare(end) != 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 taken 0%
branch 14 taken 100% (fallthrough)
    #####:   64:      istringstream sin(s);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   65:
    #####:   66:      for(int i = 0; i < num_candidates - 1; ++i) {
branch  0 never executed
branch  1 never executed
    #####:   67:        sin >> ballots[current_ballot][i];
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   68:        w << ballots[current_ballot][i] << " ";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   69:      }
        -:   70:
    #####:   71:      sin >> ballots[current_ballot][num_candidates - 1];
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   72:      w << ballots[current_ballot][num_candidates - 1] << endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   73:      ++current_ballot;
    #####:   74:    }
call    0 never executed
call    1 never executed
        -:   75:
        -:   76:    // reset vector
        1:   77:    candidates.clear();
call    0 returned 100%
        1:   78:    --num_cases;
        1:   79:    w << endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   80:  }
call    0 returned 100%
call    1 never executed
function _GLOBAL__sub_I__Z11voting_readRKSs called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        4:   81:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
